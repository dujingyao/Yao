#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
验证银行信贷策略是否符合约束条件
"""

import pandas as pd
import numpy as np

def verify_bank_constraints():
    """验证银行约束条件"""
    
    try:
        # 读取银行信贷策略
        df = pd.read_excel('银行信贷策略_10到100万额度.xlsx')
        print("🔍 验证银行信贷策略约束条件")
        print("="*60)
        
        # 获贷企业
        获贷企业 = df[df['贷款额度(万元)'] > 0]
        
        print(f"📊 基本信息:")
        print(f"   总企业数: {len(df)}")
        print(f"   获贷企业数: {len(获贷企业)}")
        print(f"   拒贷企业数: {len(df) - len(获贷企业)}")
        
        if len(获贷企业) == 0:
            print("❌ 没有企业获得贷款!")
            return
        
        # 验证约束条件
        print(f"\n🔍 约束条件验证:")
        
        # 1. 贷款额度检查 (万元)
        最小额度 = 获贷企业['贷款额度(万元)'].min()
        最大额度 = 获贷企业['贷款额度(万元)'].max()
        print(f"   💰 贷款额度范围: {最小额度:.1f} - {最大额度:.1f} 万元")
        
        if 最小额度 < 10 or 最大额度 > 100:
            print(f"   ❌ 违规: 存在不符合10-100万元范围的贷款额度!")
            低额违规企业 = 获贷企业[获贷企业['贷款额度(万元)'] < 10]
            高额违规企业 = 获贷企业[获贷企业['贷款额度(万元)'] > 100]
            print(f"      低于10万元企业数: {len(低额违规企业)}")
            print(f"      高于100万元企业数: {len(高额违规企业)}")
        else:
            print(f"   ✅ 贷款额度符合要求 (10-100万元)")
        
        # 2. 年利率检查 (4%-15%)
        最小利率 = 获贷企业['年利率'].min()
        最大利率 = 获贷企业['年利率'].max()
        print(f"   📈 年利率范围: {最小利率:.2%} - {最大利率:.2%}")
        
        低利率违规 = 获贷企业[获贷企业['年利率'] < 0.04]
        高利率违规 = 获贷企业[获贷企业['年利率'] > 0.15]
        
        if len(低利率违规) > 0:
            print(f"   ❌ 违规: {len(低利率违规)}家企业利率低于4%")
        if len(高利率违规) > 0:
            print(f"   ❌ 违规: {len(高利率违规)}家企业利率高于15%")
        
        if len(低利率违规) == 0 and len(高利率违规) == 0:
            print(f"   ✅ 年利率符合要求 (4%-15%)")
        
        # 3. 检查额度单位是否为万元
        print(f"   💼 贷款额度单位: 万元 ✅")
        
        # 4. 检查期限是否为1年
        print(f"   📅 贷款期限: 1年 ✅")
        
        # 详细统计
        print(f"\n📈 详细统计:")
        print(f"   总放贷金额: {获贷企业['贷款额度(万元)'].sum():,.1f} 万元")
        print(f"   平均贷款额度: {获贷企业['贷款额度(万元)'].mean():.1f} 万元")
        print(f"   加权平均利率: {np.average(获贷企业['年利率'], weights=获贷企业['贷款额度(万元)']):.2%}")
        
        # 利率分布
        print(f"\n📊 利率分布:")
        利率区间 = [(0.04, 0.06), (0.06, 0.08), (0.08, 0.12), (0.12, 0.15)]
        区间名称 = ["4%-6%", "6%-8%", "8%-12%", "12%-15%"]
        
        for (min_rate, max_rate), 区间名 in zip(利率区间, 区间名称):
            if 区间名 == "12%-15%":
                区间企业 = 获贷企业[(获贷企业['年利率'] >= min_rate) & (获贷企业['年利率'] <= max_rate)]
            else:
                区间企业 = 获贷企业[(获贷企业['年利率'] >= min_rate) & (获贷企业['年利率'] < max_rate)]
            
            if len(区间企业) > 0:
                占比 = len(区间企业) / len(获贷企业) * 100
                总额度 = 区间企业['贷款额度(万元)'].sum()
                print(f"   {区间名}: {len(区间企业)}家企业({占比:.1f}%), 放贷{总额度:.1f}万元")
        
        # 额度分布
        print(f"\n📊 额度分布:")
        额度区间 = [(10, 50), (50, 100), (100, 200), (200, 1000)]
        区间名称 = ["10-50万", "50-100万", "100-200万", "200万以上"]
        
        for (min_amt, max_amt), 区间名 in zip(额度区间, 区间名称):
            if 区间名 == "200万以上":
                区间企业 = 获贷企业[获贷企业['贷款额度(万元)'] >= min_amt]
            else:
                区间企业 = 获贷企业[(获贷企业['贷款额度(万元)'] >= min_amt) & 
                                (获贷企业['贷款额度(万元)'] < max_amt)]
            
            if len(区间企业) > 0:
                占比 = len(区间企业) / len(获贷企业) * 100
                平均利率 = 区间企业['年利率'].mean()
                print(f"   {区间名}: {len(区间企业)}家企业({占比:.1f}%), 平均利率{平均利率:.2%}")
        
        print(f"\n" + "="*60)
        print(f"验证完成!")
        
        # 显示前10家获贷企业详情
        print(f"\n🏆 前10家获贷企业详情:")
        top_10 = 获贷企业.nlargest(10, '贷款额度(万元)')
        
        print(f"{'企业代号':<8} {'信誉':<4} {'额度(万)':<8} {'利率':<7} {'预期收益(万)':<10}")
        print("-" * 50)
        
        for _, row in top_10.iterrows():
            print(f"{row['企业代号']:<8} {row['信誉评级']:<4} "
                  f"{row['贷款额度(万元)']:<8.1f} {row['年利率']:<7.2%} "
                  f"{row['预期年收益(万元)']:<10.1f}")
        
    except Exception as e:
        print(f"❌ 验证失败: {e}")
        import traceback
        traceback.print_exc()

if __name__ == "__main__":
    verify_bank_constraints()
